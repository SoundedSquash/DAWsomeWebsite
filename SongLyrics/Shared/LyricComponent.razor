@using DatamuseDotNet;
@using Data;

    <div class="row">
        <div class="col-1">@id</div>
        <div class="col-6">
            <input @bind="inputValue" @bind:event="oninput" @onkeyup="GetSyllables" @onchange="LyricChanged" style="width:100%;" />
        </div>
        <div class="col-1">@currentCount</div>
        <div class="col-4">@GetRhymes(50)</div>
    </div>

@code {
    [Parameter]
    public string lastWord { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<CallbackHelper.LyricChangeCallbackArgs> OnLyricChanged { get; set; }
    [Parameter]
    public int id { get; set; }
    public string? inputValue { get; private set;}
    private int currentCount = 0;
    private string synonyms = string.Empty;
    private DatamuseClient client = new DatamuseClient();

    public LyricComponent()
    {
        
    }
    public LyricComponent(string lastWord)
    {
        this.lastWord = lastWord;
    }

    private void GetSyllables(KeyboardEventArgs e)
    {
        string input = inputValue ?? "";
        //Use TextStatistics package to get syllable count.
        currentCount = TextStatistics.TextStatistics.SyllableCount(input);
    }

    private string GetRhymes(int maxResults)
    {
        //Set default value
        string value = string.Empty;

        //Stop if last word is empty.
        if (string.IsNullOrEmpty(lastWord)) return value;

        //Retrieve rhymes.
        DatamuseResultItem[] results = client.Rhymes(lastWord).Take(maxResults).ToArray();

        //Use String.Join to take a list and convert to simple list. [List].Select takes one field from the object to use.
        value = results.Length > 0 ? string.Join(", ", results.Select(result => result.word)) : $"No rhymes for '{lastWord}'.";

        return value;
    }

    private async Task LyricChanged(ChangeEventArgs e)
    {
        await OnLyricChanged.InvokeAsync(new CallbackHelper.LyricChangeCallbackArgs {Id = id, Lyric = inputValue});
    }
}
